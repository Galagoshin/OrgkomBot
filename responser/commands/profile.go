package commands

import (
	"fmt"
	"github.com/Galagoshin/VKGoBot/bot/vk/api/chats"
	"github.com/Galagoshin/VKGoBot/bot/vk/api/keyboards"
	"orgkombot/api"
)

func Profile(chat chats.Chat, outgoing chats.OutgoingMessage, user api.User, edited, gen bool) {
	kbrd := keyboards.StaticKeyboard{}
	kbrd.Init()
	kbrd.AddButton(keyboards.NormalButton{
		Row:    0,
		Column: 0,
		Payload: keyboards.Payload{
			"action": "inventory",
		},
		Color: keyboards.BlueColor,
		Text:  "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å üëï",
	})
	qr := user.GetQR()
	if qr.OwnerId == 0 {
		kbrd.AddButton(keyboards.CallbackButton{
			Row:    1,
			Column: 0,
			Payload: keyboards.Payload{
				"action": "qr",
				"next":   "profile",
			},
			Text: "QR –∫–æ–¥ üîê",
		})
	} else {
		kbrd.AddButton(keyboards.NormalButton{
			Row:    1,
			Column: 0,
			Payload: keyboards.Payload{
				"action": "qrp",
			},
			Color: keyboards.BlueColor,
			Text:  "QR –∫–æ–¥ üîê",
		})
	}
	if user.IsSubscribed() {
		kbrd.AddButton(keyboards.CallbackButton{
			Row:    3,
			Column: 0,
			Payload: keyboards.Payload{
				"action": "subscribe",
			},
			Text: "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üîï",
		})
	} else {
		kbrd.AddButton(keyboards.CallbackButton{
			Row:    3,
			Column: 0,
			Payload: keyboards.Payload{
				"action": "subscribe",
			},
			Text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üîî",
		})
	}
	kbrd.AddButton(keyboards.NormalButton{
		Row:    2,
		Column: 0,
		Color:  keyboards.BlueColor,
		Payload: keyboards.Payload{
			"action": "achievements",
		},
		Text: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚≠ê",
	})
	kbrd.AddButton(keyboards.NormalButton{
		Row:    4,
		Column: 0,
		Color:  keyboards.RedColor,
		Payload: keyboards.Payload{
			"action": "menu",
		},
		Text: "–ù–∞–∑–∞–¥ üîô",
	})
	if edited {
		if !user.IsSubscribed() {
			chat.SendMessage(chats.Message{
				Text:     "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
				Keyboard: &kbrd,
			})
		} else {
			chat.SendMessage(chats.Message{
				Text:     "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
				Keyboard: &kbrd,
			})
		}
	} else {
		if gen {
			chat.SendMessage(chats.Message{
				Text:     fmt.Sprintf("–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π QR —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –∏ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ."),
				Keyboard: &kbrd,
			})
		} else {
			chat.SendMessage(chats.Message{
				Text:     fmt.Sprintf("–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: %d üèÜ\n–¢–≤–æ–∏ –∫–æ–∏–Ω—ã: %d \U0001FA99", user.GetRating(), user.GetCoins()),
				Keyboard: &kbrd,
			})
		}
	}
}
