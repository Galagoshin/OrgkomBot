package commands

import (
	"fmt"
	"github.com/Galagoshin/GoUtils/events"
	"github.com/Galagoshin/VKGoBot/bot/vk/api/chats"
	"github.com/Galagoshin/VKGoBot/bot/vk/api/keyboards"
	"orgkombot/api"
	events2 "orgkombot/events"
	"strconv"
)

func Bank(chat chats.Chat, outgoing chats.OutgoingMessage, user api.User) {
	kbrd := keyboards.StaticKeyboard{}
	kbrd.Init()
	kbrd.AddButton(keyboards.NormalButton{
		Row:    0,
		Column: 0,
		Payload: keyboards.Payload{
			"action": "pay",
		},
		Color: keyboards.BlueColor,
		Text:  "–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üí∏",
	})
	kbrd.AddButton(keyboards.NormalButton{
		Row:    1,
		Column: 0,
		Color:  keyboards.RedColor,
		Payload: keyboards.Payload{
			"action": "menu",
		},
		Text: "–ù–∞–∑–∞–¥ üîô",
	})
	chat.SendMessage(chats.Message{
		Text:     "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å.",
		Keyboard: &kbrd,
	})
}

func StartPay(chat chats.Chat, outgoing chats.OutgoingMessage, user api.User) {
	kbrd := keyboards.StaticKeyboard{}
	kbrd.Init()
	kbrd.AddButton(keyboards.NormalButton{
		Row:    0,
		Column: 0,
		Payload: keyboards.Payload{
			"action": "pay cancel",
		},
		Color: keyboards.RedColor,
		Text:  "–û—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üö´",
	})
	user.Write(api.TypePayUser)
	chat.SendMessage(chats.Message{
		Text:     "–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–∏–Ω—ã.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: vk.com/galagoshin",
		Keyboard: &kbrd,
	})
}

func ChooseAmount(chat chats.Chat, outgoing chats.OutgoingMessage, user api.User) {
	linked := api.GetUserByLink(outgoing.Text)
	if linked != nil {
		user.Write(api.TypePayAmount)
		linked.Init()
		api.SetPayUser(user, linked)
		chat.SendMessage(chats.Message{Text: "–í–≤–µ–¥–∏, —Å–∫–æ–ª—å–∫–æ –∫–æ–∏–Ω–æ–≤ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏."})
	} else {
		chat.SendMessage(chats.Message{Text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."})
		user.Write(api.TypePayUser)
	}
}

func FinishPay(chat chats.Chat, outgoing chats.OutgoingMessage, user api.User) {
	amount, err := strconv.Atoi(outgoing.Text)
	receiver, exists := api.GetPayUser(user)
	if !exists {
		chat.SendMessage(chats.Message{Text: "–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞."})
		return
	}
	if err != nil {
		chat.SendMessage(chats.Message{Text: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n\n–ü—Ä–∏–º–µ—Ä: 5"})
		user.Write(api.TypePayAmount)
		return
	}
	if amount <= 0 && amount > 1000000 {
		chat.SendMessage(chats.Message{Text: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ > 0 && < 0. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 5"})
		user.Write(api.TypePayAmount)
		return
	}
	if !user.HaveCoins(uint(amount)) {
		chat.SendMessage(chats.Message{Text: "–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –∫–æ–∏–Ω–æ–≤, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –µ—â—ë —Ä–∞–∑."})
		user.Write(api.TypePayAmount)
		return
	}
	kbrd := keyboards.StaticKeyboard{}
	kbrd.Init()
	kbrd.AddButton(keyboards.NormalButton{
		Row:    0,
		Column: 0,
		Payload: keyboards.Payload{
			"action": "pay confirm",
			"amount": amount,
		},
		Color: keyboards.GreenColor,
		Text:  "–î–∞",
	})
	kbrd.AddButton(keyboards.NormalButton{
		Row:    0,
		Column: 1,
		Color:  keyboards.RedColor,
		Payload: keyboards.Payload{
			"action": "bank",
		},
		Text: "–ù–µ—Ç",
	})
	chat.SendMessage(chats.Message{Text: fmt.Sprintf("–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ %d \U0001FA99 —É—á–∞—Å—Ç–Ω–∏–∫—É @id%d(%s)?", amount, receiver.VKUser, receiver.GetName()), Keyboard: &kbrd})
}

func Pay(chat chats.Chat, outgoing chats.OutgoingMessage, user api.User) {
	receiver, exists := api.GetPayUser(user)
	api.RemovePayUser(user)
	if !exists || outgoing.Payload["amount"] == nil {
		chat.SendMessage(chats.Message{Text: "–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞."})
		return
	}
	amount, cast := outgoing.Payload["amount"].(float64)
	if !cast {
		chat.SendMessage(chats.Message{Text: "–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞."})
		return
	}
	if amount <= 0 && amount > 1000000 {
		chat.SendMessage(chats.Message{Text: "–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞."})
		return
	}
	if !user.HaveCoins(uint(amount)) {
		chat.SendMessage(chats.Message{Text: "–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞."})
		return
	}
	user.ReduceCoins(uint(amount))
	receiver.AddCoins(uint(amount))
	kbrd := keyboards.StaticKeyboard{}
	kbrd.Init()
	kbrd.AddButton(keyboards.NormalButton{
		Row:    0,
		Column: 0,
		Payload: keyboards.Payload{
			"action": "pay",
		},
		Color: keyboards.WhiteColor,
		Text:  "–°–¥–µ–ª–∞—Ç—å –µ—â—ë –ø–µ—Ä–µ–≤–æ–¥ üí∏",
	})
	kbrd.AddButton(keyboards.NormalButton{
		Row:    1,
		Column: 0,
		Color:  keyboards.RedColor,
		Payload: keyboards.Payload{
			"action": "menu",
		},
		Text: "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é üîô",
	})
	events.CallAllEvents(events2.PayEvent, user, receiver, amount)
	chat.SendMessage(chats.Message{Text: fmt.Sprintf("–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ %d \U0001FA99 —É—á–∞—Å—Ç–Ω–∏–∫—É @id%d(%s)", uint(amount), receiver.VKUser, receiver.GetName()), Keyboard: &kbrd})
	chats.UserChat(receiver.VKUser).SendMessage(chats.Message{Text: fmt.Sprintf("–¢–µ–±–µ –ø–µ—Ä–µ–≤—ë–ª %d \U0001FA99 —É—á–∞—Å—Ç–Ω–∏–∫ @id%d(%s)", uint(amount), user.VKUser, user.GetName()), Keyboard: &kbrd})
}
